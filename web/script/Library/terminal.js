// Generated by CoffeeScript 1.6.3
(function() {
  $(function() {
    var Applications, Terminal, terminal;
    Applications = window.Sysweb.Applicatins;
    Terminal = Events.extend({
      currentDir: "/",
      template: "<div id='terminal' style=' font-family: monospace; font-size: 12px;'>\n    <div id='terminal_output'></div>\n    <div id='terminal_input' style='margin-bottom: 250px'>\n        <span id='terminal_path' style='color: #f8c; display: inline-block; float: left; line-height: 19px; padding: 0 6px 0 0;'>" + this.currentDir + " ~#</span>\n        <input style='margin: 0;color: #0fc; background: #333; border: 0; outline: none; width: 80%; float: left; font-family: monospace;padding-top: 2px; '/>\n    </div>\n</div>",
      style: {
        position: "fixed",
        top: 0,
        left: 0,
        width: "100%",
        height: "100%",
        padding: "10px",
        background: "#333",
        color: "#0fc",
        overflow: "auto"
      },
      $: function(selector) {
        return this.$el.find(selector);
      },
      hasInputs: [],
      currentInput: 0,
      prevInput: function() {
        this.currentInput = this.currentInput - 1;
        if (this.currentInput < 0) {
          this.currentInput = 0;
        }
        if (this.hasInputs[this.currentInput]) {
          this.$input.val(this.hasInputs[this.currentInput]);
          this.$input.focus();
          this.$input[0].selectionEnd = this.$input.val().length;
          return false;
        } else {
          this.currentInput = this.hasInputs.length;
          return this.$input.val("");
        }
      },
      nextInput: function() {
        this.currentInput = this.currentInput + 1;
        if (this.hasInputs[this.currentInput] === void 0) {
          this.$input.val(this.hasInputs[this.currentInput]);
          this.$input.focus();
          this.$input[0].selectionEnd = this.$input.val().length;
          return false;
        } else {
          this.currentInput = this.hasInputs.length;
          return this.$input.val("");
        }
      },
      outputEl: function(message) {
        return $("<div class='output_line' style='font-family: monospace; font-size: 12px; padding: 2px 0;'>" + message + "</div>");
      },
      output: function(message) {
        var $output;
        if (message == null) {
          message = '';
        }
        $output = this.outputEl(message);
        this.$outputBox.append($output);
        return $output;
      },
      outputError: function(message) {
        var $o;
        if (message == null) {
          message = '';
        }
        $o = this.output();
        $o.append($("<span style='padding: 5px 20px; color: #f66;'>" + message + "</span>"));
        return this.goon();
      },
      commit: function(line) {
        var $o;
        if (line == null) {
          line = this.$input.val();
        }
        $o = this.output();
        $o.append($("<span style='padding: 5px 5px 5px 0px; color: #f8c;'>" + (this.$('#terminal_path').text()) + "</span>"));
        $o.append($("<pre style='padding: 3px 5px 3px 2px; display: inline;'>" + ($("<div/>").text(line).html()) + "</pre>"));
        if (this.$input.val()) {
          this.hasInputs[this.hasInputs.length] = this.$input.val();
        }
        this.$input.val("").hide();
        this.$("#terminal_path").text("");
        if (!line.trim()) {
          this.goon();
          return;
        }
        return this.execute(line);
      },
      execute: function(line) {
        var $o, argArr, fn, fnName, self;
        self = this;
        argArr = line.split(/\s+/);
        fnName = argArr[0];
        fn = Terminal.commandFunctions[fnName];
        if (fn) {
          return fn.apply(this, [line, argArr.slice(1)].concat(argArr.slice(1)));
        } else {
          $o = this.output();
          $o.append($("<span style='padding: 5px 20px; color: #f66;'>No Such command: \" " + fnName + " \"</span>"));
          return self.goon();
        }
      },
      goon: function() {
        this.$("#terminal_path").text("Sysweb:" + this.currentDir + "  " + (Sysweb.User.currentUser ? Sysweb.User.currentUser.username : 'Anonymous') + "$");
        this.$input.val("").show().focus();
        this.$el.animate({
          scrollTop: this.$("#terminal_output").height()
        }, 50);
        return this.currentInput = this.hasInputs.length;
      },
      getOpreateDir: function(path) {
        var cDir;
        cDir = this.currentDir.substr(0, this.currentDir.lastIndexOf("/"));
        while (path.indexOf("//") >= 0) {
          path = path.replace("//", "/");
        }
        if (path.indexOf("..") === 0) {
          cDir = cDir.substr(0, cDir.lastIndexOf("/"));
          path = path.replace("..", "");
          if (path.indexOf("/") === 0) {
            path = path.substr(1);
          }
        }
        if (path.indexOf(".") === 0) {
          path = path.substr(1);
          if (path.indexOf("/") === 0) {
            path = path.substr(1);
          }
        }
        if (path.indexOf("/") === 0) {
          cDir = "";
        }
        path = cDir + "/" + path;
        while (path.lastIndexOf("/") === path.length - 1 && path.length > 0) {
          path = path.substr(0, path.length - 1);
        }
        while (path.indexOf("//") >= 0) {
          path = path.replace("//", "/");
        }
        return path;
      },
      initialize: function(args, template, style) {
        this.args = args != null ? args : {};
        this.template = template != null ? template : this.args.template || this.template;
        this.style = style != null ? style : this.args.style || this.style;
        if ($("#terminal").length > 0) {
          $("#terminal").remove();
        }
        this.$el = $(this.template).css(this.style);
        $("body").append(this.$el);
        this.$outputBox = this.$("#terminal_output");
        this.$input = this.$("#terminal_input input");
        this.initHotkey();
        this.initEvents();
        this.initCommands();
        return this.goon();
      },
      initHotkey: function() {
        var self;
        self = this;
        return KeyBoardMaps.register("ctrl+c", function(e) {
          self.commit('');
          return self.goon();
        });
      },
      initEvents: function() {
        var self;
        self = this;
        this.$el.on("click", function() {
          return self.$input.focus();
        });
        this.$input.on("keydown", function(e) {
          return self.keyBoardListener(e);
        });
        Sysweb.User.on("logined", this.goon, this);
        return Sysweb.User.on("forbidden", function() {
          this.outputError("Command forbidden, you have to log in.");
          return this.goon();
        }, this);
      },
      initCommands: function() {},
      keyBoardListener: function(e) {
        if (e.keyCode === 13) {
          return this.commit();
        }
        if (e.keyCode === 38) {
          return this.prevInput();
        }
        if (e.keyCode === 40) {
          return this.nextInput();
        }
      }
    });
    Applications.set("terminal", Terminal);
    Terminal.getTerminal = function(args) {
      if (!Terminal.instance) {
        Terminal.instance = new Terminal(args);
      }
      Terminal.instance.$("#terminal_input input").focus();
      return Terminal.instance;
    };
    Terminal.addCommandFunction = function(name, fn) {
      if (fn == null) {
        fn = function(args) {};
      }
      return Terminal.commandFunctions[name] = fn;
    };
    Terminal.commandFunctions = {
      pwd: function() {
        this.output(this.currentDir);
        return this.goon();
      },
      cd: function(line, args, path) {
        var self;
        if (path == null) {
          path = path || '.';
        }
        self = this;
        path = this.getOpreateDir(path) + "/";
        return Sysweb.fs.isDir(path).done(function(result) {
          var $o;
          if (result.isDir) {
            self.currentDir = path;
          } else {
            $o = self.output();
            $o.append($("<span style='padding: 5px 20px; color: #f66;'>No Such Dir: " + path + "</span>"));
          }
          return self.goon();
        });
      },
      ls: function(line, args, path) {
        var self;
        if (path == null) {
          path = path || ".";
        }
        self = this;
        return Sysweb.fs.ls(self.getOpreateDir(path)).done(function(result) {
          var $o, item, _i, _len;
          $o = self.output();
          for (_i = 0, _len = result.length; _i < _len; _i++) {
            item = result[_i];
            $o.append($("<span style='padding: 5px 20px; color: " + (item.file ? "#f99" : "#99f") + "'>" + item.name + "</span>"));
          }
          return self.goon();
        });
      },
      touch: function(line, args, path) {
        var self;
        if (path == null) {
          path = path || ".";
        }
        self = this;
        if (args.length < 1) {
          this.outputError("Missing parameters");
          return this.goon();
        }
        path = self.getOpreateDir(path);
        return Sysweb.fs.touch(path).done(function(result) {
          var $o;
          if (result.error) {
            $o = self.output();
            $o.append($("<span style='padding: 5px 20px; color: #f66;'>" + path + ": " + result.message + "</span>"));
            self.goon();
          }
          if (result.exists) {
            return self.goon();
          }
        });
      },
      read: function(line, args, path) {
        var self;
        self = this;
        if (args.length < 1) {
          this.outputError("Missing parameters");
          return this.goon();
        }
        path = self.getOpreateDir(path);
        return Sysweb.fs.read(path).done(function(result) {
          var $o;
          if (result.error) {
            $o = self.output();
            $o.append($("<span style='padding: 5px 20px; color: #f66;'>" + path + ": " + result.message + "</span>"));
            self.goon();
          }
          if (result.exists) {
            $o = self.output();
            $o.append($("<pre style='padding: 5px 20px; color: #fff;'>" + ($("<div/>").text(result.text).html()) + "</pre>"));
            return self.goon();
          }
        });
      },
      write: function(line, args, path) {
        var self, text;
        self = this;
        if (args.length < 2) {
          this.outputError("Missing parameters");
          return this.goon();
        }
        text = line.substr(line.indexOf(path) + path.length);
        path = self.getOpreateDir(path);
        return Sysweb.fs.write(path, text).done(function(result) {
          var $o;
          if (result.error) {
            $o = self.output();
            $o.append($("<span style='padding: 5px 20px; color: #f66;'>" + path + ": " + result.message + "</span>"));
            self.goon();
          }
          if (result.exists) {
            $o = self.output();
            $o.append($("<pre style='padding: 5px 20px; color: #fff;'>" + ($("<div/>").text(result.text).html()) + "</pre>"));
            return self.goon();
          }
        });
      },
      append: function(line, args, path) {
        var self, text;
        self = this;
        if (args.length < 3) {
          this.output(line.replace("echo", "").trim());
          return this.goon();
        }
        text = line.substr(line.indexOf(path) + path.length);
        path = self.getOpreateDir(path);
        return Sysweb.fs.append(path, text).done(function(result) {
          var $o;
          if (result.error) {
            $o = self.output();
            $o.append($("<span style='padding: 5px 20px; color: #f66;'>" + path + ": " + result.message + "</span>"));
            self.goon();
          }
          if (result.exists) {
            $o = self.output();
            $o.append($("<pre style='padding: 5px 20px; color: #fff;'>" + ($("<div/>").text(result.text).html()) + "</pre>"));
            return self.goon();
          }
        });
      },
      echo: function(line, args) {
        var path, self, text;
        self = this;
        if (args.length < 3 || args[args.length - 2] !== ">>") {
          this.output(line.replace("echo", "").trim());
          return this.goon();
        }
        path = this.getOpreateDir(args[args.length - 1]);
        text = line.substr(5, line.lastIndexOf(">>") - 5).trim();
        if (text.indexOf("\"") === 0) {
          text = text.substr(1);
        }
        if (text.lastIndexOf("\"") === text.length - 1) {
          text = text.substr(0, text.length - 1);
        }
        return Sysweb.fs.echo(path, text).done(function(result) {
          var $o;
          $o = self.output();
          if (result.error) {
            $o.append($("<span style='padding: 5px 20px; color: #f66;'>" + path + ": " + result.message + "</span>"));
          }
          if (result.exists) {
            $o.append($("<pre style='padding: 5px 20px; color: #fff;'>" + ($("<div/>").text(result.text).html()) + "</pre>"));
          }
          return self.goon();
        });
      },
      mkdir: function(line, args, path) {
        var self;
        if (path == null) {
          path = args[0] || "";
        }
        self = this;
        path = self.getOpreateDir(path);
        return Sysweb.fs.mkdir(path).done(function(result) {
          var $o;
          if (result.error) {
            $o = self.output();
            $o.append($("<span style='padding: 5px 20px; color: #f66;'>" + path + ": " + result.message + "</span>"));
          }
          return self.goon();
        });
      },
      rm: function(line, args, path) {
        var self;
        if (path == null) {
          path = args[0] || "";
        }
        self = this;
        path = self.getOpreateDir(path);
        return Sysweb.fs.rm(path).done(function(result) {
          var $o;
          if (result.error) {
            $o = self.output();
            $o.append($("<span style='padding: 5px 20px; color: #f66;'>" + path + ": " + result.message + "</span>"));
            self.goon();
          }
          if (!result.exists) {
            return self.goon();
          }
        });
      },
      cp: function(line, args, source, dest) {
        var $o, self;
        if (source == null) {
          source = args[0];
        }
        if (dest == null) {
          dest = args[1];
        }
        self = this;
        if (args.length < 2) {
          $o = self.output();
          $o.append($("<span style='padding: 5px 20px; color: #f66;'>Args error</span>"));
          self.goon();
          return;
        }
        source = self.getOpreateDir(source);
        dest = self.getOpreateDir(dest);
        return Sysweb.fs.cp(source, dest).done(function(result) {
          if (result.error) {
            $o = self.output();
            $o.append($("<span style='padding: 5px 20px; color: #f66;'>[source: " + source + ", dest: " + dest + "]: " + result.message + "</span>"));
          }
          return self.goon();
        });
      },
      mv: function(line, args, source, dest) {
        var $o, self;
        if (source == null) {
          source = args[0];
        }
        if (dest == null) {
          dest = args[1];
        }
        self = this;
        if (!source || !dest) {
          $o = self.output();
          $o.append($("<span style='padding: 5px 20px; color: #f66;'>" + path + ": " + result.message + "</span>"));
          self.goon();
          return;
        }
        source = self.getOpreateDir(source);
        dest = self.getOpreateDir(dest);
        return Sysweb.fs.mv(source, dest).done(function(result) {
          if (result.error) {
            $o = self.output();
            $o.append($("<span style='padding: 5px 20px; color: #f66;'>[source: " + source + ", dest: " + dest + "]: " + result.message + "</span>"));
          }
          return self.goon();
        });
      },
      head: function(line, args, path, start, stop) {
        var self;
        self = this;
        return Sysweb.fs.head(self.getOpreateDir(path), start, stop).done(function(result) {
          var $o;
          if (result.error) {
            self.outputError("" + path + ": " + result.message);
          }
          if (result.text) {
            $o = self.output();
            $o.append($("<pre style='padding: 5px 20px; color: #fff;'>" + ($("<div/>").text(result.text).html()) + "</pre>"));
          }
          return self.goon();
        });
      },
      tail: function(line, args, path, start, stop) {
        var self;
        if (path == null) {
          path = args[0];
        }
        self = this;
        return Sysweb.fs.tail(self.getOpreateDir(path), start, stop).done(function(result) {
          var $o;
          if (result.error) {
            self.outputError("" + path + ": " + result.message);
          }
          if (result.text) {
            $o = self.output();
            $o.append($("<pre style='padding: 5px 20px; color: #fff;'>" + ($("<div/>").text(result.text).html()) + "</pre>"));
          }
          return self.goon();
        });
      }
    };
    terminal = Terminal.getTerminal();
    Terminal.addCommandFunction("browser", function(line, args, path) {
      if (path == null) {
        path = args[0] || "";
      }
      path = terminal.getOpreateDir(path);
      window.open(("/fs/" + Sysweb.User.currentUser.username) + path, "_blank");
      return terminal.goon();
    });
    Terminal.addCommandFunction("login", function(line, args, username, password) {
      var $o;
      if (username && password) {
        return Sysweb.User.login(username, password).done(function(result) {
          var $o;
          if (result.user) {
            Sysweb.User.currentUser = result.user;
            Terminal.getTerminal().currentDir = "/";
            $o = terminal.output();
            $o.append($("<span style='padding: 5px 20px; color: #6f6;'>has login as [" + result.user.username + "]</span>"));
          } else {
            $o = terminal.output();
            $o.append($("<span style='padding: 5px 20px; color: #f66;'>Login failed</span>"));
          }
          return terminal.goon();
        });
      } else {
        $o = terminal.output();
        $o.append($("<span style='padding: 5px 20px; color: #f66;'>args error</span>"));
        return this.goon();
      }
    });
    Terminal.addCommandFunction("register", function(line, args, username, password) {
      if (username && password) {
        return Sysweb.User.register(username, password);
      } else {
        terminal.outputError('args error');
        return this.goon();
      }
    });
    Terminal.addCommandFunction("fetchme", function(line) {
      return Sysweb.User.fetch();
    });
    Terminal.addCommandFunction("addboot", function(line, args, tag, path, attr, attrs) {
      return Sysweb.init.addBoot(tag, this.getOpreateDir(path), attr, attrs).then(function(result) {
        return window.location.reload();
      });
    });
    return Terminal.addCommandFunction("clear-console", function() {
      this.$outputBox.find(".output_line").hide();
      return this.goon();
    });
  });

}).call(this);
